{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bivin\\\\Favorites\\\\Desktop\\\\sem7\\\\fsd\\\\ocr-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Papa from 'papaparse'; // To read CSV data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [text, setText] = useState('');\n  const [recipes, setRecipes] = useState([]);\n  const [dataset, setDataset] = useState([]);\n\n  // Load the CSV file on component mount\n  useEffect(() => {\n    fetch('/dataset.csv') // Ensure this CSV is placed in the `public/` folder\n    .then(response => response.text()).then(csv => {\n      Papa.parse(csv, {\n        header: true,\n        complete: results => {\n          setDataset(results.data);\n        }\n      });\n    });\n  }, []);\n  const handleFileChange = e => {\n    setImage(e.target.files[0]);\n  };\n  const handleUpload = async () => {\n    const formData = new FormData();\n    formData.append('image', image);\n    try {\n      const response = await axios.post('http://localhost:5000/extract', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const extractedText = response.data.text;\n      setText(extractedText);\n      suggestRecipes(extractedText);\n    } catch (error) {\n      console.error('OCR error:', error);\n      alert('Failed to extract text.');\n    }\n  };\n  const suggestRecipes = text => {\n    const ingredients = text.toLowerCase().split(/[\\s,.\\n-]+/);\n    const uniqueIngredients = new Set(ingredients);\n    const matchedRecipes = dataset.filter(recipe => {\n      var _recipe$ingredients;\n      const recipeIngredients = (_recipe$ingredients = recipe.ingredients) === null || _recipe$ingredients === void 0 ? void 0 : _recipe$ingredients.toLowerCase().split(',');\n      return recipeIngredients === null || recipeIngredients === void 0 ? void 0 : recipeIngredients.every(item => uniqueIngredients.has(item.trim()));\n    });\n    setRecipes(matchedRecipes);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '2rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"OCR Ingredient Extractor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      style: {\n        marginLeft: '1rem'\n      },\n      children: \"Extract Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        marginTop: '2rem',\n        background: '#f0f0f0',\n        padding: '1rem'\n      },\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), recipes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Suggested Recipes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: recipes.map((recipe, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: recipe.recipe_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this), \" \\u2014 \", recipe.meal_type]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"sZtoE5iQ0jlOp3Et4LPMxpSUV0M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Papa","jsxDEV","_jsxDEV","App","_s","image","setImage","text","setText","recipes","setRecipes","dataset","setDataset","fetch","then","response","csv","parse","header","complete","results","data","handleFileChange","e","target","files","handleUpload","formData","FormData","append","post","headers","extractedText","suggestRecipes","error","console","alert","ingredients","toLowerCase","split","uniqueIngredients","Set","matchedRecipes","filter","recipe","_recipe$ingredients","recipeIngredients","every","item","has","trim","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","marginLeft","marginTop","background","length","map","index","recipe_name","meal_type","_c","$RefreshReg$"],"sources":["C:/Users/bivin/Favorites/Desktop/sem7/fsd/ocr-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Papa from 'papaparse'; // To read CSV data\r\n\r\nfunction App() {\r\n  const [image, setImage] = useState(null);\r\n  const [text, setText] = useState('');\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [dataset, setDataset] = useState([]);\r\n\r\n  // Load the CSV file on component mount\r\n  useEffect(() => {\r\n    fetch('/dataset.csv') // Ensure this CSV is placed in the `public/` folder\r\n      .then(response => response.text())\r\n      .then(csv => {\r\n        Papa.parse(csv, {\r\n          header: true,\r\n          complete: (results) => {\r\n            setDataset(results.data);\r\n          }\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  const handleFileChange = (e) => {\r\n    setImage(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    const formData = new FormData();\r\n    formData.append('image', image);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/extract', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      });\r\n\r\n      const extractedText = response.data.text;\r\n      setText(extractedText);\r\n      suggestRecipes(extractedText);\r\n    } catch (error) {\r\n      console.error('OCR error:', error);\r\n      alert('Failed to extract text.');\r\n    }\r\n  };\r\n\r\n  const suggestRecipes = (text) => {\r\n    const ingredients = text.toLowerCase().split(/[\\s,.\\n-]+/);\r\n    const uniqueIngredients = new Set(ingredients);\r\n\r\n    const matchedRecipes = dataset.filter(recipe => {\r\n      const recipeIngredients = recipe.ingredients?.toLowerCase().split(',');\r\n      return recipeIngredients?.every(item => uniqueIngredients.has(item.trim()));\r\n    });\r\n\r\n    setRecipes(matchedRecipes);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '2rem' }}>\r\n      <h2>OCR Ingredient Extractor</h2>\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n      <button onClick={handleUpload} style={{ marginLeft: '1rem' }}>Extract Ingredients</button>\r\n\r\n      <pre style={{ marginTop: '2rem', background: '#f0f0f0', padding: '1rem' }}>{text}</pre>\r\n\r\n      {recipes.length > 0 && (\r\n        <div style={{ marginTop: '2rem' }}>\r\n          <h3>Suggested Recipes</h3>\r\n          <ul>\r\n            {recipes.map((recipe, index) => (\r\n              <li key={index}>\r\n                <strong>{recipe.recipe_name}</strong> â€” {recipe.meal_type}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}