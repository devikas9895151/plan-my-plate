{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bivin\\\\Favorites\\\\Desktop\\\\sem7\\\\fsd\\\\ocr-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CameraCapture from \"./components/CameraCapture\";\nimport UploadImage from \"./components/UploadImage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [extractedText, setExtractedText] = useState(\"\");\n  const handleUpload = async () => {\n    const formData = new FormData();\n    formData.append(\"image\", selectedFile); // assuming selectedFile is your uploaded image\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/extract\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      console.log(\"Extracted Text:\", response.data.text);\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"OCR App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UploadImage, {\n      onExtracted: setExtractedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CameraCapture, {\n      onExtracted: setExtractedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Extracted Text:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: extractedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Byvb2RX272pndVsNZ4OWxZeZm0g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CameraCapture","UploadImage","jsxDEV","_jsxDEV","App","_s","extractedText","setExtractedText","handleUpload","formData","FormData","append","selectedFile","response","axios","post","headers","console","log","data","text","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onExtracted","_c","$RefreshReg$"],"sources":["C:/Users/bivin/Favorites/Desktop/sem7/fsd/ocr-app/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport CameraCapture from \"./components/CameraCapture\";\r\nimport UploadImage from \"./components/UploadImage\";\r\n\r\nfunction App() {\r\n  const [extractedText, setExtractedText] = useState(\"\");\r\n  const handleUpload = async () => {\r\n  const formData = new FormData();\r\n  formData.append(\"image\", selectedFile); // assuming selectedFile is your uploaded image\r\n\r\n  try {\r\n    const response = await axios.post(\"http://localhost:5000/extract\", formData, {\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    });\r\n    console.log(\"Extracted Text:\", response.data.text);\r\n  } catch (error) {\r\n    console.error(\"Error uploading image:\", error);\r\n  }\r\n};\r\n\r\n  return (\r\n    <div>\r\n      <h1>OCR App</h1>\r\n      <UploadImage onExtracted={setExtractedText} />\r\n      <CameraCapture onExtracted={setExtractedText} />\r\n      <h2>Extracted Text:</h2>\r\n      <p>{extractedText}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEC,YAAY,CAAC,CAAC,CAAC;;IAExC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,+BAA+B,EAAEN,QAAQ,EAAE;QAC3EO,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACnD,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,QAAQ,CAACM,IAAI,CAACC,IAAI,CAAC;IACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAEC,oBACElB,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBvB,OAAA,CAACF,WAAW;MAAC0B,WAAW,EAAEpB;IAAiB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9CvB,OAAA,CAACH,aAAa;MAAC2B,WAAW,EAAEpB;IAAiB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChDvB,OAAA;MAAAmB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBvB,OAAA;MAAAmB,QAAA,EAAIhB;IAAa;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV;AAACrB,EAAA,CAzBQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA2BZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}