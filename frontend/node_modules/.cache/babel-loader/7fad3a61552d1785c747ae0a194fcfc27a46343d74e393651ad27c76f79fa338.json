{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst multer = require('multer');\nconst Tesseract = require('tesseract.js');\nconst path = require('path');\nconst fs = require('fs');\nconst axios = require('axios');\nconst app = express();\nconst port = 5000;\napp.use(cors());\napp.use(express.static('uploads'));\napp.use(express.json());\n\n// --- Multer Storage Configuration for OCR Image Uploads ---\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadDir = 'uploads/';\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir);\n    }\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    cb(null, `${Date.now()}-${file.originalname}`);\n  }\n});\nconst upload = multer({\n  storage\n});\n\n// --- Spoonacular API Key Configuration ---\nconst SPOONACULAR_API_KEY = '9f3c512840db4d68a7e523e4469156a5'; // Your API key\n\nif (SPOONACULAR_API_KEY === 'YOUR_SPOONACULAR_API_KEY' || !SPOONACULAR_API_KEY) {\n  console.error(\"Spoonacular API key is not set in backend server.js!\");\n  console.error(\"Please obtain a key from https://spoonacular.com/food-api/console#Dashboard and replace the placeholder.\");\n}\n\n// --- OCR Endpoint ---\napp.post('/extract', upload.single('image'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).json({\n      error: 'No image file provided.'\n    });\n  }\n  const imagePath = path.join(__dirname, req.file.path);\n  console.log(`Performing OCR on: ${imagePath}`);\n  Tesseract.recognize(imagePath, 'eng').then(result => {\n    fs.unlink(imagePath, err => {\n      if (err) console.error('Error deleting file:', err);\n    });\n    res.json({\n      text: result.data.text\n    });\n  }).catch(error => {\n    console.error('OCR failed:', error);\n    fs.unlink(imagePath, err => {\n      if (err) console.error('Error deleting file after OCR failure:', err);\n    });\n    res.status(500).json({\n      error: 'OCR failed',\n      detail: error.message\n    });\n  });\n});\n\n// --- Recipe Suggestion Endpoint (Directly from Spoonacular - findByIngredients + additional calls) ---\napp.get('/api/recipes', async (req, res) => {\n  const queryIngredientsParam = req.query.ingredients;\n  if (!queryIngredientsParam) {\n    return res.json([]);\n  }\n  const ingredientsQuery = queryIngredientsParam.toLowerCase().split(/[\\s,.\\n-]+/).filter(Boolean).join(',');\n  if (!ingredientsQuery) {\n    return res.json([]);\n  }\n  try {\n    // Step 1: Call Spoonacular's findByIngredients endpoint to get initial matches\n    const initialSearchResponse = await axios.get(`https://api.spoonacular.com/recipes/findByIngredients?ingredients=${encodeURIComponent(ingredientsQuery)}&number=10&ranking=1&ignorePantry=true&apiKey=${SPOONACULAR_API_KEY}`);\n    const recipesWithBasicInfo = initialSearchResponse.data;\n    const detailedRecipes = [];\n\n    // Step 2: For each recipe, make an additional call to get full information (including dishTypes and cuisines)\n    // WARNING: This will consume API points rapidly!\n    for (const recipe of recipesWithBasicInfo) {\n      try {\n        const fullInfoResponse = await axios.get(`https://api.spoonacular.com/recipes/${recipe.id}/information?includeNutrition=true&apiKey=${SPOONACULAR_API_KEY}`);\n        const fullRecipeData = fullInfoResponse.data;\n\n        // Extract calories, meal type, and cuisine from the full information\n        const calories = fullRecipeData.nutrition && fullRecipeData.nutrition.nutrients ? fullRecipeData.nutrition.nutrients.find(n => n.name === 'Calories') : null;\n\n        // Prioritize common meal types for display\n        const commonMealTypes = ['breakfast', 'lunch', 'dinner', 'dessert', 'main course', 'side dish'];\n        const mealType = fullRecipeData.dishTypes && Array.isArray(fullRecipeData.dishTypes) ? fullRecipeData.dishTypes.find(type => commonMealTypes.includes(type.toLowerCase())) : null;\n        const cuisine = fullRecipeData.cuisines && Array.isArray(fullRecipeData.cuisines) && fullRecipeData.cuisines.length > 0 ? fullRecipeData.cuisines[0] : null;\n        detailedRecipes.push({\n          name: fullRecipeData.title,\n          ingredients: recipe.usedIngredients.map(ing => ing.name),\n          // Keep used ingredients from initial search\n          meal: mealType || 'Unknown',\n          calories: calories ? `${calories.amount.toFixed(0)} ${calories.unit}` : 'N/A',\n          cuisine: cuisine || 'Unknown',\n          id: fullRecipeData.id,\n          image: fullRecipeData.image // Use the image from the full info, which is usually higher quality\n        });\n      } catch (detailError) {\n        console.error(`Error fetching full details for recipe ID ${recipe.id}:`, detailError.message);\n        // If detail fetch fails, still include basic info to avoid breaking the list\n        detailedRecipes.push({\n          name: recipe.title,\n          ingredients: recipe.usedIngredients.map(ing => ing.name),\n          meal: 'Unknown',\n          calories: 'N/A',\n          cuisine: 'Unknown',\n          id: recipe.id,\n          image: recipe.image\n        });\n      }\n    }\n    res.json(detailedRecipes);\n  } catch (error) {\n    console.error(\"Error fetching recipes from Spoonacular (findByIngredients):\", error.message);\n    if (error.response) {\n      console.error(\"Spoonacular API Error Response Data:\", error.response.data);\n      console.error(\"Spoonacular API Error Status:\", error.response.status);\n      if (error.response.status === 401) {\n        return res.status(401).json({\n          message: 'Spoonacular API: Unauthorized. Check your API key.'\n        });\n      } else if (error.response.status === 402) {\n        return res.status(402).json({\n          message: 'Spoonacular API: Daily points limit reached. Please try again tomorrow or upgrade your plan.'\n        });\n      }\n    }\n    res.status(500).json({\n      error: 'Failed to fetch recipes from external API.'\n    });\n  }\n});\n\n// --- Endpoint to get full recipe details from external API (remains largely the same) ---\n// This endpoint is still needed for the modal, as it provides all details, not just a summary.\napp.get('/api/full-recipe-details', async (req, res) => {\n  const recipeName = req.query.name;\n  if (!recipeName) {\n    return res.status(400).json({\n      error: 'Recipe name is required.'\n    });\n  }\n  try {\n    let recipeIdToFetch;\n    const searchResponse = await axios.get(`https://api.spoonacular.com/recipes/complexSearch?query=${encodeURIComponent(recipeName)}&number=1&apiKey=${SPOONACULAR_API_KEY}`);\n    if (searchResponse.data.results && searchResponse.data.results.length > 0) {\n      recipeIdToFetch = searchResponse.data.results[0].id;\n    } else {\n      return res.status(404).json({\n        message: 'Full recipe details not found for this dish on Spoonacular.'\n      });\n    }\n    const fullRecipeResponse = await axios.get(`https://api.spoonacular.com/recipes/${recipeIdToFetch}/information?includeNutrition=true&apiKey=${SPOONACULAR_API_KEY}`);\n    console.log(\"Full Recipe Details from Spoonacular (including nutrition):\", fullRecipeResponse.data);\n    res.json(fullRecipeResponse.data);\n  } catch (error) {\n    console.error(\"Error fetching full recipe from Spoonacular:\", error.message);\n    if (error.response) {\n      console.error(\"Spoonacular API Error Response Data:\", error.response.data);\n      console.error(\"Spoonacular API Error Status:\", error.response.status);\n      if (error.response.status === 401) {\n        return res.status(401).json({\n          message: 'Spoonacular API: Unauthorized. Check your API key.'\n        });\n      } else if (error.response.status === 402) {\n        return res.status(402).json({\n          message: 'Spoonacular API: Daily points limit reached. Please try again tomorrow or upgrade your plan.'\n        });\n      }\n    }\n    res.status(500).json({\n      error: 'Failed to fetch full recipe details from external API.'\n    });\n  }\n});\n\n// --- Start the Server ---\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n  console.log(`OCR endpoint: http://localhost:${port}/extract`);\n  console.log(`Recipe API endpoint (Spoonacular): http://localhost:${port}/api/recipes`);\n  console.log(`Full Recipe Details endpoint (Spoonacular): http://localhost:${port}/api/full-recipe-details`);\n});","map":{"version":3,"names":["express","require","cors","multer","Tesseract","path","fs","axios","app","port","use","static","json","storage","diskStorage","destination","req","file","cb","uploadDir","existsSync","mkdirSync","filename","Date","now","originalname","upload","SPOONACULAR_API_KEY","console","error","post","single","res","status","imagePath","join","__dirname","log","recognize","then","result","unlink","err","text","data","catch","detail","message","get","queryIngredientsParam","query","ingredients","ingredientsQuery","toLowerCase","split","filter","Boolean","initialSearchResponse","encodeURIComponent","recipesWithBasicInfo","detailedRecipes","recipe","fullInfoResponse","id","fullRecipeData","calories","nutrition","nutrients","find","n","name","commonMealTypes","mealType","dishTypes","Array","isArray","type","includes","cuisine","cuisines","length","push","title","usedIngredients","map","ing","meal","amount","toFixed","unit","image","detailError","response","recipeName","recipeIdToFetch","searchResponse","results","fullRecipeResponse","listen"],"sources":["C:/Users/bivin/Favorites/Desktop/sem7/fsd/ocr-app/frontend/src/App.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst multer = require('multer');\r\nconst Tesseract = require('tesseract.js');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst axios = require('axios');\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\napp.use(cors());\r\napp.use(express.static('uploads'));\r\napp.use(express.json());\r\n\r\n// --- Multer Storage Configuration for OCR Image Uploads ---\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    const uploadDir = 'uploads/';\r\n    if (!fs.existsSync(uploadDir)) {\r\n      fs.mkdirSync(uploadDir);\r\n    }\r\n    cb(null, uploadDir);\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, `${Date.now()}-${file.originalname}`);\r\n  },\r\n});\r\n\r\nconst upload = multer({ storage });\r\n\r\n// --- Spoonacular API Key Configuration ---\r\nconst SPOONACULAR_API_KEY = '9f3c512840db4d68a7e523e4469156a5'; // Your API key\r\n\r\nif (SPOONACULAR_API_KEY === 'YOUR_SPOONACULAR_API_KEY' || !SPOONACULAR_API_KEY) {\r\n    console.error(\"Spoonacular API key is not set in backend server.js!\");\r\n    console.error(\"Please obtain a key from https://spoonacular.com/food-api/console#Dashboard and replace the placeholder.\");\r\n}\r\n\r\n// --- OCR Endpoint ---\r\napp.post('/extract', upload.single('image'), (req, res) => {\r\n  if (!req.file) {\r\n    return res.status(400).json({ error: 'No image file provided.' });\r\n  }\r\n\r\n  const imagePath = path.join(__dirname, req.file.path);\r\n  console.log(`Performing OCR on: ${imagePath}`);\r\n\r\n  Tesseract.recognize(imagePath, 'eng')\r\n    .then(result => {\r\n      fs.unlink(imagePath, (err) => {\r\n        if (err) console.error('Error deleting file:', err);\r\n      });\r\n      res.json({ text: result.data.text });\r\n    })\r\n    .catch(error => {\r\n      console.error('OCR failed:', error);\r\n      fs.unlink(imagePath, (err) => {\r\n        if (err) console.error('Error deleting file after OCR failure:', err);\r\n      });\r\n      res.status(500).json({ error: 'OCR failed', detail: error.message });\r\n    });\r\n});\r\n\r\n// --- Recipe Suggestion Endpoint (Directly from Spoonacular - findByIngredients + additional calls) ---\r\napp.get('/api/recipes', async (req, res) => {\r\n  const queryIngredientsParam = req.query.ingredients;\r\n\r\n  if (!queryIngredientsParam) {\r\n    return res.json([]);\r\n  }\r\n\r\n  const ingredientsQuery = queryIngredientsParam\r\n    .toLowerCase()\r\n    .split(/[\\s,.\\n-]+/)\r\n    .filter(Boolean)\r\n    .join(',');\r\n\r\n  if (!ingredientsQuery) {\r\n    return res.json([]);\r\n  }\r\n\r\n  try {\r\n    // Step 1: Call Spoonacular's findByIngredients endpoint to get initial matches\r\n    const initialSearchResponse = await axios.get(\r\n      `https://api.spoonacular.com/recipes/findByIngredients?ingredients=${encodeURIComponent(ingredientsQuery)}&number=10&ranking=1&ignorePantry=true&apiKey=${SPOONACULAR_API_KEY}`\r\n    );\r\n\r\n    const recipesWithBasicInfo = initialSearchResponse.data;\r\n    const detailedRecipes = [];\r\n\r\n    // Step 2: For each recipe, make an additional call to get full information (including dishTypes and cuisines)\r\n    // WARNING: This will consume API points rapidly!\r\n    for (const recipe of recipesWithBasicInfo) {\r\n      try {\r\n        const fullInfoResponse = await axios.get(\r\n          `https://api.spoonacular.com/recipes/${recipe.id}/information?includeNutrition=true&apiKey=${SPOONACULAR_API_KEY}`\r\n        );\r\n        const fullRecipeData = fullInfoResponse.data;\r\n\r\n        // Extract calories, meal type, and cuisine from the full information\r\n        const calories = fullRecipeData.nutrition && fullRecipeData.nutrition.nutrients ? \r\n                         fullRecipeData.nutrition.nutrients.find(n => n.name === 'Calories') : null;\r\n        \r\n        // Prioritize common meal types for display\r\n        const commonMealTypes = ['breakfast', 'lunch', 'dinner', 'dessert', 'main course', 'side dish'];\r\n        const mealType = fullRecipeData.dishTypes && Array.isArray(fullRecipeData.dishTypes)\r\n                         ? fullRecipeData.dishTypes.find(type => commonMealTypes.includes(type.toLowerCase()))\r\n                         : null;\r\n\r\n        const cuisine = fullRecipeData.cuisines && Array.isArray(fullRecipeData.cuisines) && fullRecipeData.cuisines.length > 0\r\n                        ? fullRecipeData.cuisines[0]\r\n                        : null;\r\n\r\n        detailedRecipes.push({\r\n          name: fullRecipeData.title,\r\n          ingredients: recipe.usedIngredients.map(ing => ing.name), // Keep used ingredients from initial search\r\n          meal: mealType || 'Unknown',\r\n          calories: calories ? `${calories.amount.toFixed(0)} ${calories.unit}` : 'N/A',\r\n          cuisine: cuisine || 'Unknown',\r\n          id: fullRecipeData.id,\r\n          image: fullRecipeData.image // Use the image from the full info, which is usually higher quality\r\n        });\r\n\r\n      } catch (detailError) {\r\n        console.error(`Error fetching full details for recipe ID ${recipe.id}:`, detailError.message);\r\n        // If detail fetch fails, still include basic info to avoid breaking the list\r\n        detailedRecipes.push({\r\n          name: recipe.title,\r\n          ingredients: recipe.usedIngredients.map(ing => ing.name),\r\n          meal: 'Unknown',\r\n          calories: 'N/A',\r\n          cuisine: 'Unknown',\r\n          id: recipe.id,\r\n          image: recipe.image\r\n        });\r\n      }\r\n    }\r\n\r\n    res.json(detailedRecipes);\r\n  } catch (error) {\r\n    console.error(\"Error fetching recipes from Spoonacular (findByIngredients):\", error.message);\r\n    if (error.response) {\r\n        console.error(\"Spoonacular API Error Response Data:\", error.response.data);\r\n        console.error(\"Spoonacular API Error Status:\", error.response.status);\r\n        if (error.response.status === 401) {\r\n            return res.status(401).json({ message: 'Spoonacular API: Unauthorized. Check your API key.' });\r\n        } else if (error.response.status === 402) {\r\n            return res.status(402).json({ message: 'Spoonacular API: Daily points limit reached. Please try again tomorrow or upgrade your plan.' });\r\n        }\r\n    }\r\n    res.status(500).json({ error: 'Failed to fetch recipes from external API.' });\r\n  }\r\n});\r\n\r\n// --- Endpoint to get full recipe details from external API (remains largely the same) ---\r\n// This endpoint is still needed for the modal, as it provides all details, not just a summary.\r\napp.get('/api/full-recipe-details', async (req, res) => {\r\n    const recipeName = req.query.name;\r\n\r\n    if (!recipeName) {\r\n        return res.status(400).json({ error: 'Recipe name is required.' });\r\n    }\r\n\r\n    try {\r\n        let recipeIdToFetch;\r\n        const searchResponse = await axios.get(`https://api.spoonacular.com/recipes/complexSearch?query=${encodeURIComponent(recipeName)}&number=1&apiKey=${SPOONACULAR_API_KEY}`);\r\n        \r\n        if (searchResponse.data.results && searchResponse.data.results.length > 0) {\r\n            recipeIdToFetch = searchResponse.data.results[0].id;\r\n        } else {\r\n            return res.status(404).json({ message: 'Full recipe details not found for this dish on Spoonacular.' });\r\n        }\r\n\r\n        const fullRecipeResponse = await axios.get(`https://api.spoonacular.com/recipes/${recipeIdToFetch}/information?includeNutrition=true&apiKey=${SPOONACULAR_API_KEY}`);\r\n        \r\n        console.log(\"Full Recipe Details from Spoonacular (including nutrition):\", fullRecipeResponse.data);\r\n\r\n        res.json(fullRecipeResponse.data);\r\n    } catch (error) {\r\n        console.error(\"Error fetching full recipe from Spoonacular:\", error.message);\r\n        if (error.response) {\r\n            console.error(\"Spoonacular API Error Response Data:\", error.response.data);\r\n            console.error(\"Spoonacular API Error Status:\", error.response.status);\r\n            if (error.response.status === 401) {\r\n                return res.status(401).json({ message: 'Spoonacular API: Unauthorized. Check your API key.' });\r\n            } else if (error.response.status === 402) {\r\n                return res.status(402).json({ message: 'Spoonacular API: Daily points limit reached. Please try again tomorrow or upgrade your plan.' });\r\n            }\r\n        }\r\n        res.status(500).json({ error: 'Failed to fetch full recipe details from external API.' });\r\n    }\r\n});\r\n\r\n// --- Start the Server ---\r\napp.listen(port, () => {\r\n  console.log(`Server running on http://localhost:${port}`);\r\n  console.log(`OCR endpoint: http://localhost:${port}/extract`);\r\n  console.log(`Recipe API endpoint (Spoonacular): http://localhost:${port}/api/recipes`);\r\n  console.log(`Full Recipe Details endpoint (Spoonacular): http://localhost:${port}/api/full-recipe-details`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}