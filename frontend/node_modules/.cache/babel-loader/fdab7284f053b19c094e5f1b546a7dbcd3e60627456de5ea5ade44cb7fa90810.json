{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bivin\\\\Favorites\\\\Desktop\\\\sem7\\\\fsd\\\\ocr-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [text, setText] = useState('');\n  const [recipes, setRecipes] = useState([]);\n  const handleFileChange = e => {\n    setImage(e.target.files[0]);\n  };\n  const handleUpload = async () => {\n    const formData = new FormData();\n    formData.append('image', image);\n    try {\n      const response = await axios.post('http://localhost:5000/extract', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const extractedText = response.data.text;\n      setText(extractedText);\n      suggestRecipes(extractedText); // ✅ Call recipe suggester\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Failed to extract text.');\n    }\n  };\n  const suggestRecipes = async text => {\n    // Make this function async\n    const ingredients = text.toLowerCase().split(/[\\s,.\\n-]+/);\n    const uniqueIngredients = new Set(ingredients);\n\n    // This is where you'll add the API call logic\n    const ingredientsQuery = Array.from(uniqueIngredients).join(','); // e.g., \"tomato,potato,onion\"\n\n    try {\n      // Replace 'YOUR_API_KEY' with your actual Spoonacular API key\n      const apiResponse = await axios.get(`https://api.spoonacular.com/recipes/findByIngredients?ingredients=${ingredientsQuery}&apiKey=YOUR_API_KEY`);\n\n      // Map the API response data to your desired format\n      const apiRecipes = apiResponse.data.map(recipe => ({\n        name: recipe.title,\n        // Adjust 'items' mapping based on Spoonacular's actual response structure for used ingredients\n        // For findByIngredients, 'usedIngredients' and 'missedIngredients' are available\n        // You might want to combine them or just list the ingredients that were 'used'\n        items: recipe.usedIngredients ? recipe.usedIngredients.map(ing => ing.name) : [],\n        meal: \"Unknown\" // Spoonacular's findByIngredients doesn't directly return meal type, you might infer or leave as 'Unknown'\n      }));\n      setRecipes(apiRecipes);\n    } catch (error) {\n      console.error(\"Error fetching recipes from API:\", error);\n      // Optionally, set an empty array or display an error message to the user\n      setRecipes([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '2rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"OCR Image Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      style: {\n        marginLeft: '1rem'\n      },\n      children: \"Upload and Extract Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        marginTop: '2rem',\n        background: '#f0f0f0',\n        padding: '1rem'\n      },\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), recipes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Suggested Recipes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: recipes.map((recipe, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: recipe.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this), \" - \", recipe.meal]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"z26dfVhCWPMTYdpOPmFrnlTNg9o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","image","setImage","text","setText","recipes","setRecipes","handleFileChange","e","target","files","handleUpload","formData","FormData","append","response","post","headers","extractedText","data","suggestRecipes","error","console","alert","ingredients","toLowerCase","split","uniqueIngredients","Set","ingredientsQuery","Array","from","join","apiResponse","get","apiRecipes","map","recipe","name","title","items","usedIngredients","ing","meal","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","marginLeft","marginTop","background","length","index","_c","$RefreshReg$"],"sources":["C:/Users/bivin/Favorites/Desktop/sem7/fsd/ocr-app/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [image, setImage] = useState(null);\r\n  const [text, setText] = useState('');\r\n  const [recipes, setRecipes] = useState([]);\r\n\r\n  const handleFileChange = (e) => {\r\n    setImage(e.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    const formData = new FormData();\r\n    formData.append('image', image);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/extract', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n      });\r\n\r\n      const extractedText = response.data.text;\r\n      setText(extractedText);\r\n      suggestRecipes(extractedText); // ✅ Call recipe suggester\r\n\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      alert('Failed to extract text.');\r\n    }\r\n  };\r\n\r\n  const suggestRecipes = async (text) => { // Make this function async\r\n    const ingredients = text.toLowerCase().split(/[\\s,.\\n-]+/);\r\n    const uniqueIngredients = new Set(ingredients);\r\n\r\n    // This is where you'll add the API call logic\r\n    const ingredientsQuery = Array.from(uniqueIngredients).join(','); // e.g., \"tomato,potato,onion\"\r\n\r\n    try {\r\n      // Replace 'YOUR_API_KEY' with your actual Spoonacular API key\r\n      const apiResponse = await axios.get(`https://api.spoonacular.com/recipes/findByIngredients?ingredients=${ingredientsQuery}&apiKey=YOUR_API_KEY`);\r\n      \r\n      // Map the API response data to your desired format\r\n      const apiRecipes = apiResponse.data.map(recipe => ({\r\n        name: recipe.title,\r\n        // Adjust 'items' mapping based on Spoonacular's actual response structure for used ingredients\r\n        // For findByIngredients, 'usedIngredients' and 'missedIngredients' are available\r\n        // You might want to combine them or just list the ingredients that were 'used'\r\n        items: recipe.usedIngredients ? recipe.usedIngredients.map(ing => ing.name) : [], \r\n        meal: \"Unknown\" // Spoonacular's findByIngredients doesn't directly return meal type, you might infer or leave as 'Unknown'\r\n      }));\r\n      setRecipes(apiRecipes);\r\n    } catch (error) {\r\n      console.error(\"Error fetching recipes from API:\", error);\r\n      // Optionally, set an empty array or display an error message to the user\r\n      setRecipes([]); \r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '2rem' }}>\r\n      <h2>OCR Image Upload</h2>\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n      <button onClick={handleUpload} style={{ marginLeft: '1rem' }}>Upload and Extract Text</button>\r\n\r\n      <pre style={{ marginTop: '2rem', background: '#f0f0f0', padding: '1rem' }}>{text}</pre>\r\n\r\n      {recipes.length > 0 && (\r\n        <div style={{ marginTop: '2rem' }}>\r\n          <h3>Suggested Recipes</h3>\r\n          <ul>\r\n            {recipes.map((recipe, index) => (\r\n              <li key={index}>\r\n                <strong>{recipe.name}</strong> - {recipe.meal}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}