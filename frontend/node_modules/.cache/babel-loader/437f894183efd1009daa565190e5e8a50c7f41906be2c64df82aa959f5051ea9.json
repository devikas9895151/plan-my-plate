{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bivin\\\\Favorites\\\\Desktop\\\\sem7\\\\fsd\\\\ocr-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css'; // Assuming you have a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [text, setText] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const handleImageChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      setImage(event.target.files[0]);\n      setText('');\n      setStatus('Image selected');\n    }\n  };\n  const uploadAndExtractText = async () => {\n    if (!image) {\n      alert('Please select an image first.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('image', image);\n    setStatus('Uploading and processing...');\n    setText(''); // Clear previous text\n\n    try {\n      // Send the image to your Python backend OCR endpoint\n      const response = await fetch('http://localhost:5000/ocr', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setText(data.text);\n      setStatus('Extraction Complete!');\n    } catch (error) {\n      console.error('API Error:', error);\n      setStatus('An error occurred.');\n      setText(`Error: ${error.message}. Check your backend server.`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"OCR Image Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleImageChange,\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: uploadAndExtractText,\n        disabled: status.includes('processing'),\n        children: \"Upload and Extract Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Status:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 12\n        }, this), \" \", status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), text && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"extracted-text-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Extracted Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"extracted-text\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pGFCw/rHxfORI3CLwt5tmOP2IFY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","image","setImage","text","setText","status","setStatus","handleImageChange","event","target","files","uploadAndExtractText","alert","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","error","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","onClick","disabled","includes","_c","$RefreshReg$"],"sources":["C:/Users/bivin/Favorites/Desktop/sem7/fsd/ocr-app/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css'; // Assuming you have a CSS file for styling\r\n\r\nfunction App() {\r\n  const [image, setImage] = useState(null);\r\n  const [text, setText] = useState('');\r\n  const [status, setStatus] = useState('Idle');\r\n\r\n  const handleImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      setImage(event.target.files[0]);\r\n      setText('');\r\n      setStatus('Image selected');\r\n    }\r\n  };\r\n\r\n  const uploadAndExtractText = async () => {\r\n    if (!image) {\r\n      alert('Please select an image first.');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('image', image);\r\n\r\n    setStatus('Uploading and processing...');\r\n    setText(''); // Clear previous text\r\n\r\n    try {\r\n      // Send the image to your Python backend OCR endpoint\r\n      const response = await fetch('http://localhost:5000/ocr', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setText(data.text);\r\n      setStatus('Extraction Complete!');\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      setStatus('An error occurred.');\r\n      setText(`Error: ${error.message}. Check your backend server.`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>OCR Image Upload</h1>\r\n        <input type=\"file\" onChange={handleImageChange} accept=\"image/*\" />\r\n        <button onClick={uploadAndExtractText} disabled={status.includes('processing')}>\r\n          Upload and Extract Text\r\n        </button>\r\n        <p><strong>Status:</strong> {status}</p>\r\n        \r\n        {text && (\r\n          <div className=\"extracted-text-container\">\r\n            <h3>Extracted Text:</h3>\r\n            <pre className=\"extracted-text\">{text}</pre>\r\n          </div>\r\n        )}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}