{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bivin\\\\Favorites\\\\Desktop\\\\sem7\\\\fsd\\\\ocr-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CameraCapture from \"./CameraCapture\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [imageData, setImageData] = useState(null);\n  const [extractedText, setExtractedText] = useState(\"\");\n  const handleImageCapture = dataUrl => {\n    setImageData(dataUrl);\n    extractTextFromImage(dataUrl);\n  };\n  const extractTextFromImage = async base64Image => {\n    const blob = await fetch(base64Image).then(res => res.blob());\n    const formData = new FormData();\n    formData.append(\"image\", blob, \"capture.png\");\n    const res = await fetch(\"http://localhost:5000/extract-text\", {\n      method: \"POST\",\n      body: formData\n    });\n    const data = await res.json();\n    setExtractedText(data.text);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"OCR App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CameraCapture, {\n      onCapture: handleImageCapture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), imageData && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageData,\n      alt: \"Captured\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Extracted Text:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: extractedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"u56zuYuZHkV4xZfmiU0Q8bX/imI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CameraCapture","jsxDEV","_jsxDEV","App","_s","imageData","setImageData","extractedText","setExtractedText","handleImageCapture","dataUrl","extractTextFromImage","base64Image","blob","fetch","then","res","formData","FormData","append","method","body","data","json","text","children","fileName","_jsxFileName","lineNumber","columnNumber","onCapture","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/bivin/Favorites/Desktop/sem7/fsd/ocr-app/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport CameraCapture from \"./CameraCapture\";\r\n\r\nfunction App() {\r\n  const [imageData, setImageData] = useState(null);\r\n  const [extractedText, setExtractedText] = useState(\"\");\r\n\r\n  const handleImageCapture = (dataUrl) => {\r\n    setImageData(dataUrl);\r\n    extractTextFromImage(dataUrl);\r\n  };\r\n\r\n  const extractTextFromImage = async (base64Image) => {\r\n    const blob = await fetch(base64Image).then(res => res.blob());\r\n    const formData = new FormData();\r\n    formData.append(\"image\", blob, \"capture.png\");\r\n\r\n    const res = await fetch(\"http://localhost:5000/extract-text\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n\r\n    const data = await res.json();\r\n    setExtractedText(data.text);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>OCR App</h1>\r\n      <CameraCapture onCapture={handleImageCapture} />\r\n      {imageData && <img src={imageData} alt=\"Captured\" />}\r\n      <h2>Extracted Text:</h2>\r\n      <pre>{extractedText}</pre>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMU,kBAAkB,GAAIC,OAAO,IAAK;IACtCJ,YAAY,CAACI,OAAO,CAAC;IACrBC,oBAAoB,CAACD,OAAO,CAAC;EAC/B,CAAC;EAED,MAAMC,oBAAoB,GAAG,MAAOC,WAAW,IAAK;IAClD,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACF,WAAW,CAAC,CAACG,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;IAC7D,MAAMI,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEN,IAAI,EAAE,aAAa,CAAC;IAE7C,MAAMG,GAAG,GAAG,MAAMF,KAAK,CAAC,oCAAoC,EAAE;MAC5DM,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEJ;IACR,CAAC,CAAC;IAEF,MAAMK,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;IAC7Bf,gBAAgB,CAACc,IAAI,CAACE,IAAI,CAAC;EAC7B,CAAC;EAED,oBACEtB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChB3B,OAAA,CAACF,aAAa;MAAC8B,SAAS,EAAErB;IAAmB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC/CxB,SAAS,iBAAIH,OAAA;MAAK6B,GAAG,EAAE1B,SAAU;MAAC2B,GAAG,EAAC;IAAU;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpD3B,OAAA;MAAAuB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB3B,OAAA;MAAAuB,QAAA,EAAMlB;IAAa;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEV;AAACzB,EAAA,CAhCQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}