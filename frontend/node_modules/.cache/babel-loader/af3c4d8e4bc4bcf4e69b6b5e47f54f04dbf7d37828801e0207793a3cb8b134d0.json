{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bivin\\\\Favorites\\\\Desktop\\\\sem7\\\\fsd\\\\ocr-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Main App component for the diet recommender application.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State variables\n  const [image, setImage] = useState(null);\n  const [text, setText] = useState('');\n  const [status, setStatus] = useState('Idle');\n  const [recipes, setRecipes] = useState([]);\n  const [selectedRecipe, setSelectedRecipe] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [activePage, setActivePage] = useState('home');\n  const [imageLoading, setImageLoading] = useState({});\n  const [userProfile, setUserProfile] = useState({\n    name: 'Paula',\n    email: 'paula@zylker.com',\n    userId: '630083685',\n    dietPlan: 'Your custom diet plan will appear here after a recommendation is generated.',\n    weeklyGoal: 'N/A'\n  });\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n  useEffect(() => {\n    const hash = window.location.hash.replace('#', '').toLowerCase() || 'home';\n    setActivePage(hash);\n  }, []);\n  const handleNavClick = page => {\n    const formattedPage = page.toLowerCase().replace(' ', '-');\n    window.location.hash = formattedPage;\n    setActivePage(formattedPage);\n  };\n  const handleImageChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      setImage(event.target.files[0]);\n      setText('');\n      setRecipes([]);\n      setSelectedRecipe(null);\n      setErrorMessage('');\n      setStatus('Image selected');\n      setImageLoading({});\n    }\n  };\n\n  // Main function to process the image and find recipes\n  const processImage = async () => {\n    setErrorMessage('');\n    if (!image) {\n      setErrorMessage('Please select an image first.');\n      return;\n    }\n    setStatus('Uploading and processing...');\n    setText('');\n    setRecipes([]);\n    setSelectedRecipe(null);\n    setImageLoading({});\n    try {\n      var _ocrData$cleaned, _recipesData$recipes;\n      const formData = new FormData();\n      formData.append('image', image);\n      console.log(\"Sending OCR request to:\", `${API_URL}/ocr`);\n      const ocrResponse = await fetch(`${API_URL}/ocr`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!ocrResponse.ok) {\n        const errorText = await ocrResponse.text();\n        console.error(\"OCR Response Error:\", ocrResponse.status, errorText);\n        throw new Error(`OCR failed with status: ${ocrResponse.status}. Server response: ${errorText}. Please ensure the backend is running and Tesseract is configured.`);\n      }\n      const ocrData = await ocrResponse.json();\n      console.log(\"OCR Response:\", ocrData);\n      if (ocrData.error) {\n        throw new Error(ocrData.error);\n      }\n\n      // âœ… Safe extraction of text from OCR\n      const extractedText = ocrData.text || ((_ocrData$cleaned = ocrData.cleaned) === null || _ocrData$cleaned === void 0 ? void 0 : _ocrData$cleaned.join('\\n')) || '';\n      if (!extractedText) {\n        setStatus('No text extracted from the image.');\n        setText('');\n        return;\n      }\n      setText(extractedText);\n\n      // Step 2: Format text into a list of ingredients\n      const ingredients = extractedText.toLowerCase().split(/\\s*[\\r\\n-]\\s*/).map(item => item.replace(/^\\d+(\\.\\d+)?\\s*(cups?|tbsp|tsp|oz|g|kg|lb)?\\s*/i, '')).map(item => item.replace(/\\b(and|or|with|to|taste)\\b/g, '')).filter(item => item.trim() !== '' && item.length > 2);\n      if (ingredients.length === 0) {\n        setStatus('No valid ingredients found in the image.');\n        return;\n      }\n      console.log(\"Extracted ingredients for /get_recipes:\", ingredients);\n      const recipesResponse = await fetch(`${API_URL}/get_recipes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ingredients\n        })\n      });\n      if (!recipesResponse.ok) {\n        const errorText = await recipesResponse.text();\n        console.error(\"Recipes Response Error:\", recipesResponse.status, errorText);\n        throw new Error(`Recipe lookup failed with status: ${recipesResponse.status}. Server response: ${errorText || 'No additional details'}`);\n      }\n      const recipesData = await recipesResponse.json();\n      console.log(\"Recipes Response:\", recipesData);\n      setRecipes(recipesData.recipes || []);\n      setImageLoading(((_recipesData$recipes = recipesData.recipes) === null || _recipesData$recipes === void 0 ? void 0 : _recipesData$recipes.reduce((acc, recipe) => ({\n        ...acc,\n        [recipe.id]: true\n      }), {})) || {});\n      setStatus('Complete!');\n    } catch (error) {\n      console.error('API Error:', error);\n      setErrorMessage(error.message.includes('Failed to fetch') ? `Cannot connect to the backend server. Please ensure it is running at ${API_URL}.` : `Error: ${error.message}`);\n      setStatus('An error occurred.');\n      setRecipes([]);\n      setImageLoading({});\n    }\n  };\n  const fetchRecipeDetails = async (id, title) => {\n    setStatus('Fetching recipe details...');\n    setErrorMessage('');\n    setImageLoading(prev => ({\n      ...prev,\n      [id]: true\n    }));\n    try {\n      const response = await fetch(`${API_URL}/get_recipe_details/${id}`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch recipe details: ${response.status}`);\n      }\n      const details = await response.json();\n      setSelectedRecipe(details);\n      setStatus('Details loaded!');\n    } catch (error) {\n      console.error('Error fetching details:', error);\n      setErrorMessage('Failed to load details. Please try again.');\n      setStatus('Failed to load details.');\n    } finally {\n      setImageLoading(prev => ({\n        ...prev,\n        [id]: false\n      }));\n    }\n  };\n  const goBackToList = () => {\n    setSelectedRecipe(null);\n    setStatus('Complete!');\n    setImageLoading({});\n  };\n  const toggleDarkMode = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n\n  // themeClasses & renderPageContent remain unchanged (omitted here for brevity)\n  // Include your current themeClasses and renderPageContent code here as-is.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${isDarkMode ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-900'} min-h-screen font-sans flex flex-col items-center p-4 sm:p-8`,\n    children: [renderPageContent(), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleDarkMode,\n      className: `fixed bottom-4 right-4 p-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-300'}`,\n      children: isDarkMode ? 'ðŸŒž Light Mode' : 'ðŸŒ™ Dark Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"9aHH+IWouRBL4I1AvvnwbmDKmJM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","image","setImage","text","setText","status","setStatus","recipes","setRecipes","selectedRecipe","setSelectedRecipe","errorMessage","setErrorMessage","isDarkMode","setIsDarkMode","activePage","setActivePage","imageLoading","setImageLoading","userProfile","setUserProfile","name","email","userId","dietPlan","weeklyGoal","API_URL","process","env","REACT_APP_API_URL","hash","window","location","replace","toLowerCase","handleNavClick","page","formattedPage","handleImageChange","event","target","files","processImage","_ocrData$cleaned","_recipesData$recipes","formData","FormData","append","console","log","ocrResponse","fetch","method","body","ok","errorText","error","Error","ocrData","json","extractedText","cleaned","join","ingredients","split","map","item","filter","trim","length","recipesResponse","headers","JSON","stringify","recipesData","reduce","acc","recipe","id","message","includes","fetchRecipeDetails","title","prev","response","details","goBackToList","toggleDarkMode","prevMode","className","children","renderPageContent","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bivin/Favorites/Desktop/sem7/fsd/ocr-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n// Main App component for the diet recommender application.\r\nconst App = () => {\r\n    // State variables\r\n    const [image, setImage] = useState(null);\r\n    const [text, setText] = useState('');\r\n    const [status, setStatus] = useState('Idle');\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [selectedRecipe, setSelectedRecipe] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [isDarkMode, setIsDarkMode] = useState(true);\r\n    const [activePage, setActivePage] = useState('home');\r\n    const [imageLoading, setImageLoading] = useState({});\r\n    const [userProfile, setUserProfile] = useState({\r\n        name: 'Paula',\r\n        email: 'paula@zylker.com',\r\n        userId: '630083685',\r\n        dietPlan: 'Your custom diet plan will appear here after a recommendation is generated.',\r\n        weeklyGoal: 'N/A'\r\n    });\r\n\r\n    const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const hash = window.location.hash.replace('#', '').toLowerCase() || 'home';\r\n        setActivePage(hash);\r\n    }, []);\r\n\r\n    const handleNavClick = (page) => {\r\n        const formattedPage = page.toLowerCase().replace(' ', '-');\r\n        window.location.hash = formattedPage;\r\n        setActivePage(formattedPage);\r\n    };\r\n\r\n    const handleImageChange = (event) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            setImage(event.target.files[0]);\r\n            setText('');\r\n            setRecipes([]);\r\n            setSelectedRecipe(null);\r\n            setErrorMessage('');\r\n            setStatus('Image selected');\r\n            setImageLoading({});\r\n        }\r\n    };\r\n\r\n    // Main function to process the image and find recipes\r\n    const processImage = async () => {\r\n        setErrorMessage('');\r\n        if (!image) {\r\n            setErrorMessage('Please select an image first.');\r\n            return;\r\n        }\r\n\r\n        setStatus('Uploading and processing...');\r\n        setText('');\r\n        setRecipes([]);\r\n        setSelectedRecipe(null);\r\n        setImageLoading({});\r\n\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('image', image);\r\n            console.log(\"Sending OCR request to:\", `${API_URL}/ocr`);\r\n\r\n            const ocrResponse = await fetch(`${API_URL}/ocr`, {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (!ocrResponse.ok) {\r\n                const errorText = await ocrResponse.text();\r\n                console.error(\"OCR Response Error:\", ocrResponse.status, errorText);\r\n                throw new Error(`OCR failed with status: ${ocrResponse.status}. Server response: ${errorText}. Please ensure the backend is running and Tesseract is configured.`);\r\n            }\r\n            const ocrData = await ocrResponse.json();\r\n            console.log(\"OCR Response:\", ocrData);\r\n\r\n            if (ocrData.error) {\r\n                throw new Error(ocrData.error);\r\n            }\r\n\r\n            // âœ… Safe extraction of text from OCR\r\n            const extractedText = ocrData.text || ocrData.cleaned?.join('\\n') || '';\r\n            if (!extractedText) {\r\n                setStatus('No text extracted from the image.');\r\n                setText('');\r\n                return;\r\n            }\r\n            setText(extractedText);\r\n\r\n            // Step 2: Format text into a list of ingredients\r\n            const ingredients = extractedText\r\n                .toLowerCase()\r\n                .split(/\\s*[\\r\\n-]\\s*/)\r\n                .map(item => item.replace(/^\\d+(\\.\\d+)?\\s*(cups?|tbsp|tsp|oz|g|kg|lb)?\\s*/i, ''))\r\n                .map(item => item.replace(/\\b(and|or|with|to|taste)\\b/g, ''))\r\n                .filter(item => item.trim() !== '' && item.length > 2);\r\n\r\n            if (ingredients.length === 0) {\r\n                setStatus('No valid ingredients found in the image.');\r\n                return;\r\n            }\r\n            console.log(\"Extracted ingredients for /get_recipes:\", ingredients);\r\n\r\n            const recipesResponse = await fetch(`${API_URL}/get_recipes`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ ingredients }),\r\n            });\r\n\r\n            if (!recipesResponse.ok) {\r\n                const errorText = await recipesResponse.text();\r\n                console.error(\"Recipes Response Error:\", recipesResponse.status, errorText);\r\n                throw new Error(`Recipe lookup failed with status: ${recipesResponse.status}. Server response: ${errorText || 'No additional details'}`);\r\n            }\r\n            const recipesData = await recipesResponse.json();\r\n            console.log(\"Recipes Response:\", recipesData);\r\n\r\n            setRecipes(recipesData.recipes || []);\r\n            setImageLoading(recipesData.recipes?.reduce((acc, recipe) => ({\r\n                ...acc,\r\n                [recipe.id]: true\r\n            }), {}) || {});\r\n            setStatus('Complete!');\r\n\r\n        } catch (error) {\r\n            console.error('API Error:', error);\r\n            setErrorMessage(error.message.includes('Failed to fetch')\r\n                ? `Cannot connect to the backend server. Please ensure it is running at ${API_URL}.`\r\n                : `Error: ${error.message}`);\r\n            setStatus('An error occurred.');\r\n            setRecipes([]);\r\n            setImageLoading({});\r\n        }\r\n    };\r\n\r\n    const fetchRecipeDetails = async (id, title) => {\r\n        setStatus('Fetching recipe details...');\r\n        setErrorMessage('');\r\n        setImageLoading(prev => ({ ...prev, [id]: true }));\r\n        try {\r\n            const response = await fetch(`${API_URL}/get_recipe_details/${id}`);\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch recipe details: ${response.status}`);\r\n            }\r\n            const details = await response.json();\r\n            setSelectedRecipe(details);\r\n            setStatus('Details loaded!');\r\n        } catch (error) {\r\n            console.error('Error fetching details:', error);\r\n            setErrorMessage('Failed to load details. Please try again.');\r\n            setStatus('Failed to load details.');\r\n        } finally {\r\n            setImageLoading(prev => ({ ...prev, [id]: false }));\r\n        }\r\n    };\r\n\r\n    const goBackToList = () => {\r\n        setSelectedRecipe(null);\r\n        setStatus('Complete!');\r\n        setImageLoading({});\r\n    };\r\n\r\n    const toggleDarkMode = () => {\r\n        setIsDarkMode((prevMode) => !prevMode);\r\n    };\r\n\r\n    // themeClasses & renderPageContent remain unchanged (omitted here for brevity)\r\n    // Include your current themeClasses and renderPageContent code here as-is.\r\n\r\n    return (\r\n        <div className={`${isDarkMode ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-900'} min-h-screen font-sans flex flex-col items-center p-4 sm:p-8`}>\r\n            {/* Header and main content rendering remains the same */}\r\n            {renderPageContent()}\r\n            <button\r\n                onClick={toggleDarkMode}\r\n                className={`fixed bottom-4 right-4 p-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-300'}`}\r\n            >\r\n                {isDarkMode ? 'ðŸŒž Light Mode' : 'ðŸŒ™ Dark Mode'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}